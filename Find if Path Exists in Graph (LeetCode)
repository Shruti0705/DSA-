class Solution {


    public boolean validPath(int n, int[][] edges, int source, int destination) 
    {
        boolean[] vis = new boolean[n];
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        for(int i=0; i<edges.length; i++)
        {
            int x = edges[i][0];
            int y = edges[i][1];

            if(map.containsKey(x))
            {
                map.get(x).add(y);
            }
            else{
                map.put(x, new ArrayList<>());
                map.get(x).add(y);
            }

            if(map.containsKey(y))
            {
                map.get(y).add(x);
            }
            else{
                map.put(y, new ArrayList<>());
                map.get(y).add(x);
            }
        }
        Queue<Integer> que = new LinkedList<>();
        que.add(source);
        while(!que.isEmpty())
        {
            int v = que.poll();
            vis[v] = true;
            if(v == destination) return true;
            else{
                for(int i : map.get(v))
                {
                    if(vis[i] != true)
                    {
                        vis[i] = true;
                        que.add(i);
                    }
                }
            }
        }
        return false;
    }
}
